services:
  chromadb:
    image: ghcr.io/chroma-core/chroma:latest
    user: 1000:1000
    ports:
      - "127.0.0.1:8000:8000"
    volumes:
      - ./data/chromadb:/chroma/data
      - ./data/chromadb_logs/chroma.log:/chroma/chroma.log
    environment:
      - PERSIST_DIRECTORY=/chroma/data
      - ANONYMIZED_TELEMETRY=False
      - CHROMA_SERVER_HTTP_PORT=8000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
      
  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    image: exabomination-api:latest
    # Use host network for simplicity
    network_mode: "host"
    volumes:
      - ./data:/app/data
    depends_on:
      - chromadb
    restart: unless-stopped
    environment:
      - DEBUG_MODE=True
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - VOYAGE_API_KEY=${VOYAGE_API_KEY}
      - CHROMA_SERVER_HOST=127.0.0.1
      - CHROMA_SERVER_PORT=8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
      
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    image: exabomination-frontend:latest
    # Use simple host network mode for direct access
    network_mode: "host"
    volumes:
      - ./data:/app/data
      - ./.env.frontend:/app/.env.frontend
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      - STREAMLIT_SERVER_ENABLE_STATIC_SERVING=true
      - STREAMLIT_LOG_LEVEL=debug
      - EXABOMINATION_API_URL=http://localhost:8888/v1
      - ENABLE_ANALYTICS=false
      - ENABLE_AUTHENTICATION=false 
      - ENABLE_ADVANCED_FILTERS=true
      - ENABLE_SUGGESTIONS=true
      - ENABLE_MOCK_FALLBACKS=false
      - SHOW_API_ERRORS=true
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "/app/frontend/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
      
  # Caddy reverse proxy container
  caddy:
    image: caddy:2-alpine
    container_name: caddy
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "2222:2222"
      - "80:80"
      - "443:443"
    volumes:
      - ./caddy-docker/caddy/config/Caddyfile:/etc/caddy/Caddyfile
      - ./caddy-docker/caddy/certs:/certs:ro
      - ./caddy-docker/caddy/data:/data
      - ./logs/caddy:/logs/caddy
    # Wait for other services to be ready
    depends_on:
      - api
      - frontend
    healthcheck:
      test: ["CMD", "caddy", "version"]
      interval: 30s
      timeout: 10s
      retries: 3

